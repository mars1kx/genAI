package utils

import (
	"testing"
)

func TestReverseString(t *testing.T) {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –≤ –≤–∏–¥–µ –ø–∞—Ä –≤—Ö–æ–¥–Ω—ã—Ö –∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	testCases := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–û–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "a",
			expected: "a",
		},
		{
			name:     "–û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "–ø—Ä–∏–≤–µ—Ç",
			expected: "—Ç–µ–≤–∏—Ä–ø",
		},
		{
			name:     "–ü–∞–ª–∏–Ω–¥—Ä–æ–º",
			input:    "—à–∞–ª–∞—à",
			expected: "—à–∞–ª–∞—à",
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏",
			input:    "hello world",
			expected: "dlrow olleh",
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏",
			input:    "123456",
			expected: "654321",
		},
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
			input:    "!@#$%^&*()",
			expected: ")(*&^%$#@!",
		},
		{
			name:     "–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã",
			input:    "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π",
			expected: "–π–∏–∑–∂—ë–µ–¥–≥–≤–±–∞",
		},
		{
			name:     "–≠–º–æ–¥–∑–∏",
			input:    "üòÄüôÇüòä",
			expected: "üòäüôÇüòÄ",
		},
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result := ReverseString(tc.input)
			if result != tc.expected {
				t.Errorf("ReverseString(%q) = %q; want %q", tc.input, result, tc.expected)
			}
		})
	}
} 